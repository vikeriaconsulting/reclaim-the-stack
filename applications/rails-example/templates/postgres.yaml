# Creates a Postgres cluster via the CloudNativePG PostgreSQL Operator.
#
# By default we create two users. One with the same name as the database which has
# CREATE rights and one readonly user who is only allowed to SELECT. Feel free to
# modify spec.users as you see fit.
#
# Example values.yaml:
# resources:
#   postgres:
#     replicas: 2
#     memory: 1Gi
#     cpu: 1
#     disk: 10Gi
#     # Tip: generate configuration based on CPU / RAM settings at https://pgtune.leopard.in.ua/
#     config:
#       max_connections: "40"
#       shared_buffers: 256MB
#       effective_cache_size: 768MB
#       maintenance_work_mem: 64MB
#       checkpoint_completion_target: "0.9"
#       wal_buffers: 7864kB
#       default_statistics_target: "100"
#       random_page_cost: "1.1"
#       effective_io_concurrency: "200"
#       work_mem: 3276kB
#       min_wal_size: 1GB
#       max_wal_size: 4GB
#       pg_stat_statements.max: "10000"
#       pg_stat_statements.track: top
# env:
#   - { name: DATABASE_URL, valueFrom: { secretKeyRef: { name: rails-example-app, key: uri } } }

apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Chart.Name }}
spec:
  imageName: ghcr.io/cloudnative-pg/postgresql:16.3
  primaryUpdateStrategy: unsupervised
  enableSuperuserAccess: false
  instances: {{ .Values.resources.postgres.replicas }}
  resources:
    requests:
      memory: {{ .Values.resources.postgres.memory }}
      cpu: {{ .Values.resources.postgres.cpu | quote }}
    limits:
      memory: {{ .Values.resources.postgres.memory }}
      cpu: {{ .Values.resources.postgres.cpu | quote }}
  storage:
    size: {{ .Values.resources.postgres.disk }}
  bootstrap:
    initdb:
      database: {{ .Chart.Name }}
      postInitSQL:
        - GRANT pg_create_subscription TO "{{ .Chart.Name }}";
  postgresql:
    parameters:
      {{ .Values.resources.postgres.config | toYaml | nindent 6 }}
  monitoring:
    enablePodMonitor: true
  affinity:
    tolerations:
      - key: role
        value: database
        effect: NoSchedule
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/database
                operator: Exists
# The following example uses S3-compatible storage for backups. Refer to the CloudnativePG
# documentation for more details and options like Azure and Google Cloud Storage.
#   backup:
#     retentionPolicy: 30d
#     barmanObjectStore:
#       destinationPath: s3://<bucket-name>/cloudnativepg
#       # endpointURL: https://<s3-compatible-host> # for non-AWS S3-compatible storage
#       # Prepare this secret with: k secrets:create cloudnativepg-s3-credentials
#       s3Credentials:
#         accessKeyId:
#           name: cloudnativepg-s3-credentials
#           key: ACCESS_KEY_ID
#         secretAccessKey:
#           name: cloudnativepg-s3-credentials
#           key: SECRET_ACCESS_KEY
#       wal:
#         compression: gzip
#         maxParallel: 4
# ---
# apiVersion: postgresql.cnpg.io/v1
# kind: ScheduledBackup
# metadata:
#   name: {{ .Chart.Name }}
# spec:
#   schedule: "0 0 1 * * *" # At 01:00 every day
#   backupOwnerReference: self
#   cluster:
#     name: {{ .Chart.Name }}
